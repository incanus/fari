#!/usr/bin/env python3

import argparse
import curses
import json
import re
import subprocess
import sys

tabs = []

def get_tab_count():
    capture = subprocess.run([
        'osascript',
        '-e', 'tell app "Safari"',
        '-e', '  get count of tabs of window 1',
        '-e', 'end tell'
    ], capture_output=True)
    if capture.stderr:
        return 0
    else:
        return int(capture.stdout.decode('utf-8').strip())

def load_tabs():
    global tabs
    tabs = []
    capture = subprocess.run([
        'osascript', '-s', 's',
        '-e', 'tell app "Safari"',
        '-e', '  get {name, URL} of tabs of window 1',
        '-e', 'end tell'
    ], capture_output=True)
    if not capture.stderr:
        details = capture.stdout.decode('utf-8').strip()
        details = re.sub('},\s{', '],[',
                  re.sub('}}$', ']]',
                  re.sub('^{{', '[[',
                  re.sub('missing value', '"(blank tab)"', details))))
        details_json = json.loads(details)
        for i in range(len(details_json[0])):
            tabs.append({'name': details_json[0][i], 'url': details_json[1][i]})

def get_display_count(s):
    return min(args.count, s.getmaxyx()[0] - 5)

def paint_urls(s, tabs, first, highlighted=-1):
    x = s.getmaxyx()[1]
    lines = get_display_count(s)
    count = len(tabs)
    show = lines if count - first >= lines else count - first
    s.addstr(
        0, 0,
        f"Choose a tab "
        f"[{first + 1}-{first + show} of {count}]:".ljust(x),
        curses.A_STANDOUT
    )
    label_length = round(x / 2)
    url_length = x - label_length - 5
    for clear_row in range(lines):
        s.hline(clear_row + 2, 0, ' ', x)
    for row in range(show):
        label = tabs[first + row]['name']
        label = label[:label_length].ljust(label_length)
        url = tabs[first + row]['url']
        url = re.sub('^https?://(www\.)?', '', url)
        url = url[:url_length].ljust(url_length)
        if row == highlighted:
            s.addstr(row + 2, 0, f"{row}>".ljust(4), curses.A_STANDOUT)
        else:
            s.addstr(row + 2, 0, f"{row}.".ljust(4))
        s.addstr(f"{label} ")
        s.addstr(f"{url}", curses.A_UNDERLINE)
    last = f"-{show - 1}" if show - 1 >= 1 else ''
    toolbar_row = lines + 3
    s.hline(toolbar_row, 0, ' ', x)
    s.addstr(
        toolbar_row, 0,
        f"[0{last}: Open] "
        f"[<: Prev] "
        f"[>: Next] "
        f"[/: Search] "
        f"[q: Quit]".ljust(x),
        curses.A_STANDOUT
    )
    s.refresh()
    return (count, show)

def open_url(url):
    subprocess.run(['open', url])

def main(s):
    s.timeout(3000)
    while True:
        tab_count = get_tab_count()
        if tab_count == 0:
            s.clear()
            (y, x) = s.getmaxyx()
            message = 'No open tabs!'
            s.addstr(
                round(y / 2) - 1,
                round(x / 2) - round(len(message) / 2),
                message
            )
            next
        prompt_line = get_display_count(s) + 4
        key = None
        try:
            key = s.getkey(prompt_line, 0)
        except: 
            pass
        if tab_count != len(tabs):
            load_tabs()
            first = 0
            highlighted = -1
            s.clear()
            (count, show) = paint_urls(s, tabs, first, highlighted)
        if key == '<':
            first -= get_display_count(s)
            first = 0 if first < 0 else first
            highlighted = -1
        elif key == '>':
            if first + args.count < count:
                first += args.count
                highlighted = -1
        elif key == 'q':
            break
        elif key == 'KEY_UP' or key == 'KEY_DOWN':
            if highlighted == -1:
                highlighted = 0
            elif highlighted > 0 and key == 'KEY_UP':
                highlighted -= 1
            elif highlighted < show - 1 and key == 'KEY_DOWN':
                highlighted += 1
        elif key == 'KEY_RIGHT' and highlighted > -1:
            open_url(tabs[first + highlighted]['url'])
            highlighted = -1
        elif key == '/':
            highlighted = -1
            (count, show) = paint_urls(s, tabs, 0)
            old_count = count
            old_first = first
            s.addstr('Search [space to exit]:', curses.A_STANDOUT)
            s.addstr(' ')
            searching = True
            term = ''
            pos = s.getyx()
            while searching:
                key = None
                try:
                    key = s.getkey()
                except:
                    pass
                if key == 'KEY_DC' and len(term) > 0:
                    term = term[0:len(term)-1]
                    s.addstr(pos[0], pos[1] + len(term), ' ')
                    s.move(pos[0], pos[1] + len(term))
                elif key == 'KEY_UP' or key == 'KEY_DOWN':
                    if highlighted == -1:
                        highlighted = 0
                    elif highlighted > 0 and key == 'KEY_UP':
                        highlighted -= 1
                    elif highlighted < show - 1 and key == 'KEY_DOWN':
                        highlighted += 1
                elif key == 'KEY_RIGHT' and highlighted > -1:
                    visible_tabs = search_tabs if search_tabs else tabs
                    open_url(visible_tabs[first + highlighted]['url'])
                    highlighted = -1
                elif key == ' ':
                    searching = False
                    highlighted = -1
                elif (key and re.match('KEY_', key)) or key == '>':
                    pass
                elif key and re.match('[a-z0-9/=-_#\.\?]', key):
                    term += key
                    s.addstr(pos[0], pos[1] + len(term) - 1, key)
                    highlighted = -1
                if len(term) > 0:
                    term = term.lower()
                    search_tabs = []
                    for tab in tabs:
                        if tab['name'].lower().find(term) > -1 or re.sub('^https?://(www\.)?', '', tab['url']).lower().find(term) > -1:
                            search_tabs.append(tab)
                    (count, show) = paint_urls(s, search_tabs, 0, highlighted)
            s.hline(prompt_line, 0, ' ', s.getmaxyx()[1])
            count = old_count
            first = old_first
        elif key and re.match('[0-9]', key):
            open_url(tabs[first + int(key)]['url'])
        if key and tab_count:
            (count, show) = paint_urls(s, tabs, first, highlighted)

parser = argparse.ArgumentParser()
parser.add_argument(
    '-c',
    action='store',
    help='number of tabs to show per page',
    dest='count',
    type=int,
    metavar='COUNT',
    default=sys.maxsize
)
args = parser.parse_args()
curses.wrapper(main)